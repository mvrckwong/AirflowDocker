version: '3.8'
name: 'datapipeline-users'

x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  build:
    context: ./docker
    dockerfile: Dockerfile

  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USER}:${DB_PW}@${DB_HOST}/${DB_NAME}
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USER}:${DB_PW}@${DB_HOST}/${DB_NAME}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${DB_USER}:${DB_PW}@${DB_HOST}/${DB_NAME}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'

  volumes:
    # insert airflow directories
    - ${AIRFLOW_SRC_DIR:-.}/dags:${AIRFLOW_DEST_DIR:-/opt/airflow}/dags
    - ${AIRFLOW_SRC_DIR:-.}/logs:${AIRFLOW_DEST_DIR:-/opt/airflow}/logs
    - ${AIRFLOW_SRC_DIR:-.}/config:${AIRFLOW_DEST_DIR:-/opt/airflow}/config
    - ${AIRFLOW_SRC_DIR:-.}/plugins:${AIRFLOW_DEST_DIR:-/opt/airflow}/plugins

    # insert project paths

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy


services:
  redis:
    image: redis:alpine3.18
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: ["webserver"]
    ports:
      - "${PORT_AIRFLOW_WEBSERVER:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: ["scheduler"]
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-webserver:
        condition: service_healthy

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-webserver:
        condition: service_healthy

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-webserver:
        condition: service_completed_successfully


  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  airflow-flower:
    <<: *airflow-common
    command: celery flower
    # profiles:
    #   - flower
    ports:
      - "${PORT_AIRFLOW_FLOWER:-5555}:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-webserver:
        condition: service_healthy

  # export statsd 
  statsd-exporter:
    image: prom/statsd-exporter:v0.21.0
    volumes:
      - ./dashboard/statsd.yaml:/home/statsd-mapping-configs.yaml
    entrypoint: ["/bin/sh", "-c", "--"]
    command: ["statsd_exporter --log.level debug --statsd.mapping-config=/home/statsd-mapping-configs.yaml"]
    ports:
      - ${PORT_STATSD_SCRAPE:-9102}:9102   # scrape port
      - ${PORT_STATSD_INGEST:-9125}:9125   # ingest port
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-webserver:
        condition: service_healthy

  # ingesting and scraping
  prometheus:
    image: prom/prometheus:v2.26.0
    volumes:
      - ./dashboard/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - ${PORT_PROMETHEUS:-9090}:9090
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-webserver:
        condition: service_healthy

volumes:
  prometheus_data:
  grafana_data: